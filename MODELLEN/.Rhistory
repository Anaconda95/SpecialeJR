print(elexptab, file="elexptab.txt")
library(xtable)
print(infotab, file="infotab.txt")
print(alphatab, file="alphatab.txt")
print(betatab, file="betatab.txt")
print(beta2tab, file="beta2tab.txt")
print(eloptab, file="eloptab.txt")
print(elexptab, file="elexptab.txt")
print.xtable(infotab, file="infotab.txt")
infotab.table <- xtable(kvinttab_estinfo)
print.xtable(infotab.table, file="infotab.txt")
setwd("~/Documents/GitHub/SpecialeJR /MODELLEN")
print(infotab, file="infotab.txt")
1+1
print(infotab, file="infotab.txt")
print(alphatab, file="alphatab.txt")
print(betatab, file="betatab.txt")
print(beta2tab, file="beta2tab.txt")
print(eloptab, file="eloptab.txt")
print(elexptab, file="elexptab.txt")
df = kvint_1
df     <- transform( df,
p1 = priser$Pris.kod_fisk_mej,
p2 = priser$Pris.ovr_fode,
p3 = priser$Pris.bol,
p4 = priser$Pris.ene_hje,
p5 = priser$Pris.ene_tra,
p6 = priser$Pris.tra,
p7 = priser$Pris.ovr_var,
p8 = priser$Pris.ovr_tje
)
#shares findes som forbrug i løbende priser/samlet forbrug af de otte varer.
df     <- transform( df,
w1 = df$kod_fisk_mej /df$ialt,
w2 = df$ovr_fode/df$ialt,
w3 = df$bol/df$ialt,
w4 = df$ene_hje/df$ialt,
w5 = df$ene_tra/df$ialt,
w6 = df$tra/df$ialt,
w7 = df$ovr_var/df$ialt,
w8 = df$ovr_tje/df$ialt
)
#phat findes som priser divideret med samlet forbrug
df     <- transform( df,
phat1=p1/df$ialt,
phat2=p2/df$ialt,
phat3=p3/df$ialt,
phat4=p4/df$ialt,
phat5=p5/df$ialt,
phat6=p6/df$ialt,
phat7=p7/df$ialt,
phat8=p8/df$ialt
)
#faste priser (2015-priser)
df     <- transform( df,
x1 = df$kod_fisk_mej /priser$Pris.kod_fisk_mej,
x2 = df$ovr_fode     /priser$Pris.ovr_fode,
x3 = df$bol          /priser$Pris.bol,
x4 = df$ene_hje      /priser$Pris.ene_hje,
x5 = df$ene_tra      /priser$Pris.ene_tra,
x6 = df$tra          /priser$Pris.tra,
x7 = df$ovr_var      /priser$Pris.ovr_var,
x8 = df$ovr_tje      /priser$Pris.ovr_tje
)
#Datasættet sættes op i 'pæne' matricer.
w = matrix(c(df$w1,df$w2,df$w3,df$w4,df$w5,df$w6,df$w7,df$w8),  nrow=26, ncol=8)
phat = matrix(c(df$phat1,df$phat2,df$phat3,df$phat4,df$phat5,df$phat6,df$phat7,df$phat8), nrow=26, ncol=8)
x = matrix(c(df$x1,df$x2,df$x3,df$x4,df$x5,df$x6,df$x7,df$x8), nrow=26, ncol=8)
p = matrix(c(df$p1,df$p2,df$p3,df$p4,df$p5,df$p6,df$p7,df$p8), nrow=26, ncol=8)
#x og phat skaleres. X er forbrug i faste priser. Det er for at få bedre konvergens når der optimeres. Uklart
# om det stadig er et problem
x <- x/10000
phat <- phat*10000
dims=dim(w)
T=dims[1]
n=dims[2]
# Startværdier ----------------
#Løser ligningssystem, så gamma'erne afspejler de ønskede alphaer startværdier
#Sæt ønskede alpha fx lig budgetandele i sidste periode. gamma_n er lig 0.
gammafn <- function(par,alpha_goal) {
return(  sum((alpha_goal - exp(par)/(1+sum(exp(par))) )^2)    )
}
gammasol <- optim(par=rep(0,(n-1)),fn=gammafn, alpha_goal=w[T,1:(n-1)], method="BFGS",
control=list(maxit=5000))
gamma_start <- c(gammasol$par,0)
#sætter startværdier for bstar: her z pct. af det mindste forbrug over årene af en given vare i fastepriser
b_start <- 0.7*apply(x, 2, min) # b skal fortolkes som 10.000 2015-kroner.
a <- w[T,1:(n)]  #igen, a er en logit
b <- b_start         # b er time-invariant
supernum <- 1-rowSums(phat %*% diag(b))
supernummat <- matrix(rep(supernum,n),ncol=n)
u <- w - phat %*% diag(b) - supernummat%*%diag(a)
#smid en variabel ud
uhat <- u[ ,1:(n-1)]
#find invers af cov(uhat) - jf. Peters note
covar <- cov(uhat)
covar_start <- covar[lower.tri(covar,diag=TRUE)]
habit=rep(0.5,n)
AR = rep(0.5,n)
if(df_kvint==4){
AR=rep(0.5,n)
habit=rep(0.5,n)}
timetrend=rep(0.01,n)
autocorr <- 0.9
start_1 = c(gamma_start[1:(n-1)], b_start, covar_start)
start_2 = c(gamma_start[1:(n-1)], b_start, covar_start, autocorr)
start_3 = c(gamma_start[1:(n-1)], b_start, timetrend, covar_start)
start_4 = c(gamma_start[1:(n-1)], b_start, timetrend, covar_start, autocorr)
start_5 = c(gamma_start[1:(n-1)], b_start, habit, covar_start)
start_6 = c(gamma_start[1:(n-1)], b_start, habit, covar_start, autocorr)
start_7 = c(gamma_start[1:(n-1)], AR, sqrt(habit), covar_start)
start_8 = c(gamma_start[1:(n-1)], AR, habit, covar_start, autocorr)
## Maksimerer likelihood -----
startvals = list(start_1,start_2,start_3, start_4, start_5, start_6, start_7, start_8)
#Set model
j=7;
startval <- startvals[[j]]
startval
sol <-  optim(par = startval, fn = loglik, model=j,
phat=phat, w=w, x=x, method="BFGS",
control=list(maxit=5000,
trace=6,
ndeps = rep(1e-10,length(startval))) )
solcentral<- sol
sol_gamma <- c(sol$par[1:(n-1)],0)
alpha_sol <- exp(sol_gamma)/sum(exp(sol_gamma))
sum(alpha_sol)
alpha_sol
source('~/Documents/GitHub/SpecialeJR /MODELLEN/0. Data og pakker.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /MODELLEN/1. Max Likelihood.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /MODELLEN/5. Resultater_RLK.R', echo=TRUE)
ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="right")
ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="right")
for (i in 1:8) {
v=data.frame(Year=c(1996:2019), Quintile_1_b=b_min[[1]][3:26,i], Quintile_1_Cons = forbrug[[1]][3:26,i],
Quintile_3_b=b_min[[3]][3:26,i], Quintile_3_Cons = forbrug[[3]][3:26,i],
Quintile_5_b=b_min[[5]][3:26,i], Quintile_5_Cons = forbrug[[5]][3:26,i])
v <- v %>%
#select(Year, Consumption, M1, M2, M3, M4, M5, M6, M7, M8) %>%
gather(key = "Model", value = "value", -Year)
#If you want a legend:
p[[i]] <- ggplot(v, aes(x = Year, y = value)) + ggtitle(vareagg[i])+ theme_bw()
geom_line(aes(color = Model, linetype = Model)) +
scale_color_manual(values = c("cornflowerblue","cornflowerblue", "gold2","gold2","brown2","brown2"))+
scale_linetype_manual(values = c("twodash", "solid", "twodash","solid","twodash"))+
labs(y = "DKK (2015 Prices)")
}
p <- list()
vareagg = c("Meat and dairy","Other foods","Housing","Energy for housing","Energy for transport","Transport","Other goods","Other services")
for (i in 1:8) {
v=data.frame(Year=c(1996:2019), Quintile_1_b=b_min[[1]][3:26,i], Quintile_1_Cons = forbrug[[1]][3:26,i],
Quintile_3_b=b_min[[3]][3:26,i], Quintile_3_Cons = forbrug[[3]][3:26,i],
Quintile_5_b=b_min[[5]][3:26,i], Quintile_5_Cons = forbrug[[5]][3:26,i])
v <- v %>%
#select(Year, Consumption, M1, M2, M3, M4, M5, M6, M7, M8) %>%
gather(key = "Model", value = "value", -Year)
#If you want a legend:
p[[i]] <- ggplot(v, aes(x = Year, y = value)) + ggtitle(vareagg[i])+ theme_bw()
geom_line(aes(color = Model, linetype = Model)) +
scale_color_manual(values = c("cornflowerblue","cornflowerblue", "gold2","gold2","brown2","brown2"))+
scale_linetype_manual(values = c("twodash", "solid", "twodash","solid","twodash"))+
labs(y = "DKK (2015 Prices)")
}
p <- list()
vareagg = c("Meat and dairy","Other foods","Housing","Energy for housing","Energy for transport","Transport","Other goods","Other services")
for (i in 1:8) {
v=data.frame(Year=c(1996:2019), Quintile_1_b=b_min[[1]][3:26,i], Quintile_1_Cons = forbrug[[1]][3:26,i],
Quintile_3_b=b_min[[3]][3:26,i], Quintile_3_Cons = forbrug[[3]][3:26,i],
Quintile_5_b=b_min[[5]][3:26,i], Quintile_5_Cons = forbrug[[5]][3:26,i])
v <- v %>%
#select(Year, Consumption, M1, M2, M3, M4, M5, M6, M7, M8) %>%
gather(key = "Model", value = "value", -Year)
#If you want a legend:
p[[i]] <- ggplot(v, aes(x = Year, y = value)) + ggtitle(vareagg[i])+ theme_bw()+
geom_line(aes(color = Model, linetype = Model)) +
scale_color_manual(values = c("cornflowerblue","cornflowerblue", "gold2","gold2","brown2","brown2"))+
scale_linetype_manual(values = c("twodash", "solid", "twodash","solid","twodash"))+
labs(y = "DKK (2015 Prices)")
}
stortplot = ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="right")
for (i in 1:8) {
v=data.frame(Year=c(1996:2019), Quintile_1_b=b_min[[1]][3:26,i], Quintile_1_Cons = forbrug[[1]][3:26,i],
Quintile_3_b=b_min[[3]][3:26,i], Quintile_3_Cons = forbrug[[3]][3:26,i],
Quintile_5_b=b_min[[5]][3:26,i], Quintile_5_Cons = forbrug[[5]][3:26,i])
v <- v %>%
#select(Year, Consumption, M1, M2, M3, M4, M5, M6, M7, M8) %>%
gather(key = "Model", value = "value", -Year)
#If you want a legend:
p[[i]] <- ggplot(v, aes(x = Year, y = value)) + ggtitle(vareagg[i])+ theme_bw()+
geom_line(aes(color = Model, linetype = Model)) +
scale_color_manual(values = c("cornflowerblue","cornflowerblue", "gold2","gold2","brown2","brown2"))+
scale_linetype_manual(values = c("twodash", "solid", "twodash","solid","twodash","solid"))+
labs(y = "DKK (2015 Prices)")
}
stortplot = ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="right")
ggsave(
"b_quintileplot.pdf",
plot = stortplot,
device="pdf",
width = 8.27,
height = 11.69,
units = c("in", "cm", "mm"),
dpi = 300,
limitsize = TRUE,
)
stortplot = ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="bottom")
ggsave(
"b_quintileplot.pdf",
plot = stortplot,
device="pdf",
width = 8.27,
height = 11.69,
units = c("in", "cm", "mm"),
dpi = 300,
limitsize = TRUE,
)
for (i in 1:8) {
v=data.frame(Year=c(1996:2019), Quintile_1_b=b_min[[1]][3:26,i], Quintile_1_Cons = forbrug[[1]][3:26,i],
Quintile_3_b=b_min[[3]][3:26,i], Quintile_3_Cons = forbrug[[3]][3:26,i],
Quintile_5_b=b_min[[5]][3:26,i], Quintile_5_Cons = forbrug[[5]][3:26,i])
v <- v %>%
#select(Year, Consumption, M1, M2, M3, M4, M5, M6, M7, M8) %>%
gather(key = "Consumption and b by quintile", value = "value", -Year)
#If you want a legend:
p[[i]] <- ggplot(v, aes(x = Year, y = value)) + ggtitle(vareagg[i])+ theme_bw()+
geom_line(aes(color = Model, linetype = Model)) +
scale_color_manual(values = c("cornflowerblue","cornflowerblue", "gold2","gold2","brown2","brown2"))+
scale_linetype_manual(values = c("twodash", "solid", "twodash","solid","twodash","solid"))+
labs(y = "DKK (2015 Prices)")
}
stortplot = ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="bottom")
ggsave(
"b_quintileplot.pdf",
plot = stortplot,
device="pdf",
width = 8.27,
height = 11.69,
units = c("in", "cm", "mm"),
dpi = 300,
limitsize = TRUE,
)
for (i in 1:8) {
v=data.frame(Year=c(1996:2019), Quintile_1_b=b_min[[1]][3:26,i], Quintile_1_Cons = forbrug[[1]][3:26,i],
Quintile_3_b=b_min[[3]][3:26,i], Quintile_3_Cons = forbrug[[3]][3:26,i],
Quintile_5_b=b_min[[5]][3:26,i], Quintile_5_Cons = forbrug[[5]][3:26,i])
v <- v %>%
#select(Year, Consumption, M1, M2, M3, M4, M5, M6, M7, M8) %>%
gather(key = "Consumption and b by quintile", value = "value", -Year)
#If you want a legend:
p[[i]] <- ggplot(v, aes(x = Year, y = value)) + ggtitle(vareagg[i])+ theme_bw()+
geom_line(aes(color = Model, linetype = Model)) +
scale_color_manual(values = c("cornflowerblue","cornflowerblue", "gold2","gold2","brown2","brown2"))+
scale_linetype_manual(values = c("twodash", "solid", "twodash","solid","twodash","solid"))+
labs(y = "DKK (2015 Prices)")
}
stortplot = ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="bottom")
for (i in 1:8) {
v=data.frame(Year=c(1996:2019), Quintile_1_b=b_min[[1]][3:26,i], Quintile_1_Cons = forbrug[[1]][3:26,i],
Quintile_3_b=b_min[[3]][3:26,i], Quintile_3_Cons = forbrug[[3]][3:26,i],
Quintile_5_b=b_min[[5]][3:26,i], Quintile_5_Cons = forbrug[[5]][3:26,i])
v <- v %>%
#select(Year, Consumption, M1, M2, M3, M4, M5, M6, M7, M8) %>%
gather(key = "Consumption and b by quintile", value = "value", -Year)
#If you want a legend:
p[[i]] <- ggplot(v, aes(x = Year, y = value)) + ggtitle(vareagg[i])+ theme_bw()+
geom_line(aes(color = "Consumption and b by quintile", linetype = "Consumption and b by quintile")) +
scale_color_manual(values = c("cornflowerblue","cornflowerblue", "gold2","gold2","brown2","brown2"))+
scale_linetype_manual(values = c("twodash", "solid", "twodash","solid","twodash","solid"))+
labs(y = "DKK (2015 Prices)")
}
stortplot = ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="bottom")
ggsave(
"b_quintileplot.pdf",
plot = stortplot,
device="pdf",
width = 8.27,
height = 11.69,
units = c("in", "cm", "mm"),
dpi = 300,
limitsize = TRUE,
)
for (i in 1:8) {
v=data.frame(Year=c(1996:2019), Quintile_1_b=b_min[[1]][3:26,i], Quintile_1_Cons = forbrug[[1]][3:26,i],
Quintile_3_b=b_min[[3]][3:26,i], Quintile_3_Cons = forbrug[[3]][3:26,i],
Quintile_5_b=b_min[[5]][3:26,i], Quintile_5_Cons = forbrug[[5]][3:26,i])
v <- v %>%
#select(Year, Consumption, M1, M2, M3, M4, M5, M6, M7, M8) %>%
gather(key = "Quintile", value = "value", -Year)
#If you want a legend:
p[[i]] <- ggplot(v, aes(x = Year, y = value)) + ggtitle(vareagg[i])+ theme_bw()+
geom_line(aes(color = Quintile, linetype = Quintile)) +
scale_color_manual(values = c("cornflowerblue","cornflowerblue", "gold2","gold2","brown2","brown2"))+
scale_linetype_manual(values = c("twodash", "solid", "twodash","solid","twodash","solid"))+
labs(y = "DKK (2015 Prices)")
}
stortplot = ggarrange(plotlist=p, ncol=2, nrow=4, common.legend = TRUE, legend="bottom")
ggsave(
"b_quintileplot.pdf",
plot = stortplot,
device="pdf",
width = 8.27,
height = 11.69,
units = c("in", "cm", "mm"),
dpi = 300,
limitsize = TRUE,
)
b2019 = sol_b_mat[(T),]
debugSource('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
q
q
q
quit
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
print(b2019tab, file="b2019tab.txt")
b2019tab
kvinttab_b2019  =round(kvinttab_b2019 ,digits=antaldigits)
kvinttab_b2019
for (g in 1:n){
kvinttab_alpha[(2*g-1),df_kvint]=alpha_sol[g]
kvinttab_alpha[(2*g),df_kvint]=alpha_se[g]
kvinttab_beta[(2*g-1),df_kvint]=beta_sol[g]
kvinttab_beta[(2*g),df_kvint]=beta_se[g]
kvinttab_beta2[(2*g-1),df_kvint]=beta2_sol[g]
kvinttab_beta2[(2*g),df_kvint]=beta2_se[g]
kvinttab_el_op[(2*g-1),df_kvint]=sol_el_op[g]
kvinttab_el_op[(2*g),df_kvint]=el_op_se[g]
kvinttab_el_exp[(2*g-1),df_kvint]=sol_el_exp[g]
kvinttab_el_exp[(2*g),df_kvint]=el_exp_se[g]
kvinttab_b2019[(2*g-1),df_kvint]=b2019_sol[g]
kvinttab_b2019[(2*g),df_kvint]=b2019_se[g]
}
kvinttab_b2019  =round(kvinttab_b2019 ,digits=antaldigits)
kvinttab_b2019
alpha_sol
alpha_boot_mat
alpha_conf    = matrix(nrow=2,ncol = n)
beta2_conf    = matrix(nrow=2,ncol = n)
beta_conf     = matrix(nrow=2,ncol = n)
el_op_conf    = matrix(nrow=2,ncol = n)
el_exp_conf   = matrix(nrow=2,ncol = n)
b2019_conf    = matrix(nrow=2,ncol = n)
alpha_se    = c(1:n)
beta2_se    = c(1:n)
beta_se     = c(1:n)
el_op_se    = c(1:n)
el_exp_se   = c(1:n)
b2019_se    = c(1:n)
for (s in 1:n){
ci <-quantile(alpha_boot_mat[,s], c(.05,.95))
alpha_conf[1,s]=ci[1]
alpha_conf[2,s]=ci[2]
alpha_se[s] = sd(alpha_boot_mat[,s])
ci <-quantile(beta_boot_mat[,s], c(.05,.95))
beta_conf[1,s]=ci[1]
beta_conf[2,s]=ci[2]
beta_se[s] = sd(beta_boot_mat[,s])
ci <-quantile(beta2_boot_mat[,s], c(.05,.95))
beta2_conf[1,s]=ci[1]
beta2_conf[2,s]=ci[2]
beta2_se[s] = sd(beta2_boot_mat[,s])
ci <-quantile(el_op_boot_mat[,s], c(.05,.95))
el_op_conf[1,s]=ci[1]
el_op_conf[2,s]=ci[2]
el_op_se[s] = sd(el_op_boot_mat[,s])
ci <-quantile(el_exp_boot_mat[,s], c(.05,.95))
el_exp_conf[1,s]=ci[1]
el_exp_conf[2,s]=ci[2]
el_exp_se[s] = sd(el_exp_boot_mat[,s])
ci <-quantile(b2019_boot_mat[,s], c(.05,.95))
b2019_conf[1,s]=ci[1]
b2019_conf[2,s]=ci[2]
b2019_se[s] = sd(b2019_boot_mat[,s])
}
for (g in 1:n){
kvinttab_alpha[(2*g-1),df_kvint]=alpha_sol[g]
kvinttab_alpha[(2*g),df_kvint]=alpha_se[g]
kvinttab_beta[(2*g-1),df_kvint]=beta_sol[g]
kvinttab_beta[(2*g),df_kvint]=beta_se[g]
kvinttab_beta2[(2*g-1),df_kvint]=beta2_sol[g]
kvinttab_beta2[(2*g),df_kvint]=beta2_se[g]
kvinttab_el_op[(2*g-1),df_kvint]=sol_el_op[g]
kvinttab_el_op[(2*g),df_kvint]=el_op_se[g]
kvinttab_el_exp[(2*g-1),df_kvint]=sol_el_exp[g]
kvinttab_el_exp[(2*g),df_kvint]=el_exp_se[g]
kvinttab_b2019[(2*g-1),df_kvint]=b2019_sol[g]
kvinttab_b2019[(2*g),df_kvint]=b2019_se[g]
}
}
bracket <- function(x, i, j){
x[i,j] <- sprintf("(%s)", x[i,j])
x
}
#Afrund tabeller
antaldigits=3
kvinttab_estinfo=round(kvinttab_estinfo,digits=antaldigits)
kvinttab_alpha  =round(kvinttab_alpha  ,digits=antaldigits)
kvinttab_beta   =round(kvinttab_beta   ,digits=antaldigits)
kvinttab_beta2  =round(kvinttab_beta2  ,digits=antaldigits)
kvinttab_el_op  =round(kvinttab_el_op  ,digits=antaldigits)
kvinttab_el_exp =round(kvinttab_el_exp ,digits=antaldigits)
kvinttab_b2019  =round(kvinttab_b2019 ,digits=antaldigits)
stortab=rbind(kvinttab_alpha,kvinttab_beta,kvinttab_beta2,kvinttab_el_op,kvinttab_el_exp,kvinttab_b2019)
tablist=list(kvinttab_alpha,kvinttab_beta,kvinttab_beta2,kvinttab_el_op,kvinttab_el_exp,kvinttab_b2019)
for (tab in 1:6){
tablist[[tab]]
# every second row
ind = which(row(tablist[[tab]]) %% 2 == 0, arr.ind = TRUE)
tablist[[tab]]<-bracket(tablist[[tab]], ind[,1], ind[,2])
}
alphanam<-rep("alpha",6)
betanam<-rep("beta",6)
beta2nam<-rep("beta2",6)
el_opnam<-rep("el_op",6)
el_exp<-rep("el_exp",6)
x<- rbind(kvinttab_estinfo,alphanam,tablist[[1]],
betanam, tablist[[2]],
beta2nam, tablist[[3]],
el_opnam, tablist[[4]],
el_exp,tablist[[5]])
print(xtable(x))
infotab <- xtable(kvinttab_estinfo)
alphatab <- xtable(tablist[[1]])
betatab <- xtable(tablist[[2]])
beta2tab <- xtable(tablist[[3]])
eloptab <- xtable(tablist[[4]])
elexptab <- xtable(tablist[[5]])
b2019tab <- xtable(tablist[[6]])
b2019tab
b2019_sol
b2019_se
b2019_boot_mat
alpha_sol
alpha_boot_mat
alpha_conf    = matrix(nrow=2,ncol = n)
beta2_conf    = matrix(nrow=2,ncol = n)
beta_conf     = matrix(nrow=2,ncol = n)
el_op_conf    = matrix(nrow=2,ncol = n)
el_exp_conf   = matrix(nrow=2,ncol = n)
b2019_conf    = matrix(nrow=2,ncol = n)
alpha_se    = c(1:n)
beta2_se    = c(1:n)
beta_se     = c(1:n)
el_op_se    = c(1:n)
el_exp_se   = c(1:n)
b2019_se    = c(1:n)
for (s in 1:n){
ci <-quantile(alpha_boot_mat[,s], c(.05,.95))
alpha_conf[1,s]=ci[1]
alpha_conf[2,s]=ci[2]
alpha_se[s] = sd(alpha_boot_mat[,s])
ci <-quantile(beta_boot_mat[,s], c(.05,.95))
beta_conf[1,s]=ci[1]
beta_conf[2,s]=ci[2]
beta_se[s] = sd(beta_boot_mat[,s])
ci <-quantile(beta2_boot_mat[,s], c(.05,.95))
beta2_conf[1,s]=ci[1]
beta2_conf[2,s]=ci[2]
beta2_se[s] = sd(beta2_boot_mat[,s])
ci <-quantile(el_op_boot_mat[,s], c(.05,.95))
el_op_conf[1,s]=ci[1]
el_op_conf[2,s]=ci[2]
el_op_se[s] = sd(el_op_boot_mat[,s])
ci <-quantile(el_exp_boot_mat[,s], c(.05,.95))
el_exp_conf[1,s]=ci[1]
el_exp_conf[2,s]=ci[2]
el_exp_se[s] = sd(el_exp_boot_mat[,s])
ci <-quantile(b2019_boot_mat[,s], c(.05,.95))
b2019_conf[1,s]=ci[1]
b2019_conf[2,s]=ci[2]
b2019_se[s] = sd(b2019_boot_mat[,s])
}
el_exp_se
b2019_se
for (g in 1:n){
kvinttab_alpha[(2*g-1),df_kvint]=alpha_sol[g]
kvinttab_alpha[(2*g),df_kvint]=alpha_se[g]
kvinttab_beta[(2*g-1),df_kvint]=beta_sol[g]
kvinttab_beta[(2*g),df_kvint]=beta_se[g]
kvinttab_beta2[(2*g-1),df_kvint]=beta2_sol[g]
kvinttab_beta2[(2*g),df_kvint]=beta2_se[g]
kvinttab_el_op[(2*g-1),df_kvint]=sol_el_op[g]
kvinttab_el_op[(2*g),df_kvint]=el_op_se[g]
kvinttab_el_exp[(2*g-1),df_kvint]=sol_el_exp[g]
kvinttab_el_exp[(2*g),df_kvint]=el_exp_se[g]
kvinttab_b2019[(2*g-1),df_kvint]=b2019_sol[g]
kvinttab_b2019[(2*g),df_kvint]=b2019_se[g]
}
kvinttab_b2019
b2019_sol
for (g in 1:n){
kvinttab_alpha[(2*g-1),df_kvint]=alpha_sol[g]
kvinttab_alpha[(2*g),df_kvint]=alpha_se[g]
kvinttab_beta[(2*g-1),df_kvint]=beta_sol[g]
kvinttab_beta[(2*g),df_kvint]=beta_se[g]
kvinttab_beta2[(2*g-1),df_kvint]=beta2_sol[g]
kvinttab_beta2[(2*g),df_kvint]=beta2_se[g]
kvinttab_el_op[(2*g-1),df_kvint]=sol_el_op[g]
kvinttab_el_op[(2*g),df_kvint]=el_op_se[g]
kvinttab_el_exp[(2*g-1),df_kvint]=sol_el_exp[g]
kvinttab_el_exp[(2*g),df_kvint]=el_exp_se[g]
kvinttab_b2019[(2*g-1),df_kvint]=b2019_sol[g]
kvinttab_b2019[(2*g),df_kvint]=b2019_se[g]
}
kvinttab_b2019
b2019_se
b2019_boot_mat
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
b2019tab
b2019_boot_mat
b2019tab
print(b2019tab, file="b2019tab.txt")
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
