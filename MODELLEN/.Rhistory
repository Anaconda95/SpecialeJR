hack.exe
run hack.exe
install.packages("ccgarch")
library(readxl)
cryptopriser_m_weekend <- read_excel("OneDrive/CryptoBachelor/cryptopriser m weekend.xlsx")
View(cryptopriser_m_weekend)
View(cryptopriser_m_weekend)
x <- btc
mydata <- cryptopriser_m_weekend
summary(mydata)
hack(bitpanda.com, extract(ALL RIPPLE COINS))
install.packages("rmgarch")
dccfit(fg)
library("rmgarch", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
fit.2.11mn = dccfit(dcc.11mn, data = B [1:192, 1:3])
uspec.n = multispec(replicate(3, ugarchspec(mean.model = list(armaOrder = c(1,1)))))
library("MTS")
uspec.n = multispec(replicate(3, ugarchspec(mean.model = list(armaOrder = c(1,1)))))
library("vars")
library(parallel)
library(rugarch)
library(rmgarch)
library("tseries")
library("zoo")
library("forecast")
library("FinTS")
library("vars")
library("MTS")
uspec.n = multispec(replicate(3, ugarchspec(mean.model = list(armaOrder = c(1,1)))))
dcc.11mn = dccspec(uspec.n, VAR = TRUE, lag = 4, lag.max = 12, dccOrder = c(1, 1), distribution = 'mvnorm')
fit.2.11mn = dccfit(dcc.11mn, data = B [1:192, 1:3])
library(readxl)
cryptopriser_m_weekend_edit <- read_excel("OneDrive/CryptoBachelor/cryptopriser m weekend edit.xlsx")
View(cryptopriser_m_weekend_edit)
mydata <- cryptopriser_m_weekend_edit
library(parallel)
library(rugarch)
library(rmgarch)
library("tseries")
library("zoo")
library("forecast")
library("FinTS")
library("vars")
library("MTS")
uspec.n = multispec(replicate(3, ugarchspec(mean.model = list(armaOrder = c(1,1)))))
dcc.11mn = dccspec(uspec.n, VAR = TRUE, lag = 4, lag.max = 12, dccOrder = c(1, 1), distribution = 'mvnorm')
fit.2.11mn = dccfit(dcc.11mn, data = mydata [1:1747, 18:19])
install.packages("tseries")
install.packages("zoo")
install.packages("zoo")
install.packages("forecast")
install.packages("FinTS")
install.packages("vars")
install.packages("MTS")
mydata <- cryptopriser_m_weekend_edit
summary(mydata)
library(parallel)
library(rugarch)
library(rmgarch)
library("tseries")
library("zoo")
library("forecast")
library("FinTS")
library("vars")
library("MTS")
uspec.n = multispec(replicate(3, ugarchspec(mean.model = list(armaOrder = c(1,1)))))
dcc.11mn = dccspec(uspec.n, VAR = TRUE, lag = 4, lag.max = 12, dccOrder = c(1, 1), distribution = 'mvnorm')
fit.2.11mn = dccfit(dcc.11mn, data = mydata [1:1747, 18:19])
#devtools::document("P:/CST/Kalman/CESKalman")   ## Opdaterer dokumentationen (ikke n?dvendig at k?re)
#devtools::build_manual("P:/CST/Kalman/CESKalman") ## Opdaterer manual (ikke n?dvendig at k?re)
library(CESKalman)
devtools::install("Macintosh HD⁩ ▸ ⁨Brugere⁩ ▸ ⁨rasmuskaslund⁩ ▸ ⁨Dokumenter⁩ ▸ ⁨GitHub⁩ ▸ ⁨SpecialeJR ⁩ ▸ ⁨CES-kalman⁩") ## Installerer pakken
devtools::install("Macintosh HD/Brugere/rasmuskaslund/Dokumenter/GitHub/SpecialeJR/CES-kalman/CESKalman⁩") ## Installerer pakken⁩
#devtools::document("P:/CST/Kalman/CESKalman")   ## Opdaterer dokumentationen (ikke n?dvendig at k?re)
#devtools::build_manual("P:/CST/Kalman/CESKalman") ## Opdaterer manual (ikke n?dvendig at k?re)
library(CESKalman)
set.seed(1234)
sigma = 0.6 ## Typisk hvad man finder i literaturen
# Standardafvigelser
SigmaGammaK  = 0.05
rm(list=ls())
# =================================================================================
# --------------- INSTALLING PACKAGE ----------------------------------------------
# =================================================================================
library(devtools)
# =================================================================================
# --------------- INSTALLING PACKAGE ----------------------------------------------
# =================================================================================
library(devtools)
install.packages("devtools")
source('~/Documents/GitHub/SpecialeJR /CES-kalman/CESKalman_Example.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /CES-kalman/CESKalman_Example.R', echo=TRUE)
install.packages("CESKalman")
install.packages("remotes")
remotes::install_github("CKastrup/CESKalman")
install.packages("remotes")
remotes::install_github("CKastrup/CESKalman")
install.packages("remotes")
remotes::install_github("CKastrup/CESKalman")
source('~/Documents/GitHub/SpecialeJR /CES-kalman/CESKalman_Example.R', echo=TRUE)
install.packages("devtools")
installed.packages("devtools")
install.packages("devtools")
source('~/Documents/GitHub/SpecialeJR /MODELLEN/0. Data og pakker.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /MODELLEN/0. Data og pakker.R', echo=TRUE)
################################################################################
##################### Script til at indl?se data og pakker #####################
################################################################################
############################ First of all: load usefull packages ###########################################
#clear workspace
rm(list=ls())
library(mvtnorm)
library("xlsx")
#install.packages("grid")
library("grid")
#install.packages("ggplot")
#install.packages("tidyr")
library("dplyr")
library("tidyr")
library("ggplot2")
#install.packages("gridExtra")
library(gridExtra)
library(grid)
library(ggplot2)
#install.packages("ggpubr")
library(ggpubr)
library(lattice)
#install.packages("ggpubr")
library(ggpubr)
#no scientific numbers
options(scipen=999)
options(digits=5)
library(xtable)
options(xtable.floating = FALSE)
options(xtable.timestamp = "")
###### Indl?s data ###################
#Indlæser data: RASMUS
priser<-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/PRISINDEKS.csv",sep=',')
df_h <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_h.csv",sep=',')
df_1 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_1.csv",sep=',')
df_2 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_2.csv",sep=',')
df_3 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_3.csv",sep=',')
df_4 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_4.csv",sep=',')
df_5 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_5.csv",sep=',')
df_6 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_6.csv",sep=',')
df_7 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_7.csv",sep=',')
df_8 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_8.csv",sep=',')
df_9 <-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_9.csv",sep=',')
df_10<-read.csv("/Users/rasmuskaslund/Documents/GitHub/SpecialeJR /PRISDATA DST/v8_decil_10.csv",sep=',')
#Lav kvintiler
kvint_1 <- (df_1+df_2)/2
kvint_2 <- (df_3+df_4)/2
kvint_3 <- (df_5+df_6)/2
kvint_4 <- (df_7+df_8)/2
kvint_5 <- (df_9+df_10)/2
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /MODELLEN/1. Max Likelihood.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
alpha_tab
alphatab
infotab <- kvinttab_estinfo
infotab <- xtable(kvinttab_estinfo)
infotab
source('~/Documents/GitHub/SpecialeJR /MODELLEN/7. Bootstrap_model7.R', echo=TRUE)
alphatab
eloptab
el_exp
elexptab
alphatab
betatab
infotab
beta2tab
eloptab
elexptab
alhpa
alpha_sol
sum(alpha_sol)
kvinttab_alpha
print(infotab, file="infotab.txt")
print(alphatab, file="alphatab.txt")
print(betatab, file="betatab.txt")
print(beta2tab, file="beta2tab.txt")
print(eloptabtab, file="eloptab.txt")
print(elexptabtab, file="elexptab.txt")
print(infotab, file="infotab.txt")
print(alphatab, file="alphatab.txt")
print(betatab, file="betatab.txt")
print(beta2tab, file="beta2tab.txt")
print(eloptab, file="eloptab.txt")
print(elexptab, file="elexptab.txt")
library(xtable)
print(infotab, file="infotab.txt")
print(alphatab, file="alphatab.txt")
print(betatab, file="betatab.txt")
print(beta2tab, file="beta2tab.txt")
print(eloptab, file="eloptab.txt")
print(elexptab, file="elexptab.txt")
print.xtable(infotab, file="infotab.txt")
infotab.table <- xtable(kvinttab_estinfo)
print.xtable(infotab.table, file="infotab.txt")
setwd("~/Documents/GitHub/SpecialeJR /MODELLEN")
print(infotab, file="infotab.txt")
1+1
print(infotab, file="infotab.txt")
print(alphatab, file="alphatab.txt")
print(betatab, file="betatab.txt")
print(beta2tab, file="beta2tab.txt")
print(eloptab, file="eloptab.txt")
print(elexptab, file="elexptab.txt")
df = kvint_1
df     <- transform( df,
p1 = priser$Pris.kod_fisk_mej,
p2 = priser$Pris.ovr_fode,
p3 = priser$Pris.bol,
p4 = priser$Pris.ene_hje,
p5 = priser$Pris.ene_tra,
p6 = priser$Pris.tra,
p7 = priser$Pris.ovr_var,
p8 = priser$Pris.ovr_tje
)
#shares findes som forbrug i løbende priser/samlet forbrug af de otte varer.
df     <- transform( df,
w1 = df$kod_fisk_mej /df$ialt,
w2 = df$ovr_fode/df$ialt,
w3 = df$bol/df$ialt,
w4 = df$ene_hje/df$ialt,
w5 = df$ene_tra/df$ialt,
w6 = df$tra/df$ialt,
w7 = df$ovr_var/df$ialt,
w8 = df$ovr_tje/df$ialt
)
#phat findes som priser divideret med samlet forbrug
df     <- transform( df,
phat1=p1/df$ialt,
phat2=p2/df$ialt,
phat3=p3/df$ialt,
phat4=p4/df$ialt,
phat5=p5/df$ialt,
phat6=p6/df$ialt,
phat7=p7/df$ialt,
phat8=p8/df$ialt
)
#faste priser (2015-priser)
df     <- transform( df,
x1 = df$kod_fisk_mej /priser$Pris.kod_fisk_mej,
x2 = df$ovr_fode     /priser$Pris.ovr_fode,
x3 = df$bol          /priser$Pris.bol,
x4 = df$ene_hje      /priser$Pris.ene_hje,
x5 = df$ene_tra      /priser$Pris.ene_tra,
x6 = df$tra          /priser$Pris.tra,
x7 = df$ovr_var      /priser$Pris.ovr_var,
x8 = df$ovr_tje      /priser$Pris.ovr_tje
)
#Datasættet sættes op i 'pæne' matricer.
w = matrix(c(df$w1,df$w2,df$w3,df$w4,df$w5,df$w6,df$w7,df$w8),  nrow=26, ncol=8)
phat = matrix(c(df$phat1,df$phat2,df$phat3,df$phat4,df$phat5,df$phat6,df$phat7,df$phat8), nrow=26, ncol=8)
x = matrix(c(df$x1,df$x2,df$x3,df$x4,df$x5,df$x6,df$x7,df$x8), nrow=26, ncol=8)
p = matrix(c(df$p1,df$p2,df$p3,df$p4,df$p5,df$p6,df$p7,df$p8), nrow=26, ncol=8)
#x og phat skaleres. X er forbrug i faste priser. Det er for at få bedre konvergens når der optimeres. Uklart
# om det stadig er et problem
x <- x/10000
phat <- phat*10000
dims=dim(w)
T=dims[1]
n=dims[2]
# Startværdier ----------------
#Løser ligningssystem, så gamma'erne afspejler de ønskede alphaer startværdier
#Sæt ønskede alpha fx lig budgetandele i sidste periode. gamma_n er lig 0.
gammafn <- function(par,alpha_goal) {
return(  sum((alpha_goal - exp(par)/(1+sum(exp(par))) )^2)    )
}
gammasol <- optim(par=rep(0,(n-1)),fn=gammafn, alpha_goal=w[T,1:(n-1)], method="BFGS",
control=list(maxit=5000))
gamma_start <- c(gammasol$par,0)
#sætter startværdier for bstar: her z pct. af det mindste forbrug over årene af en given vare i fastepriser
b_start <- 0.7*apply(x, 2, min) # b skal fortolkes som 10.000 2015-kroner.
a <- w[T,1:(n)]  #igen, a er en logit
b <- b_start         # b er time-invariant
supernum <- 1-rowSums(phat %*% diag(b))
supernummat <- matrix(rep(supernum,n),ncol=n)
u <- w - phat %*% diag(b) - supernummat%*%diag(a)
#smid en variabel ud
uhat <- u[ ,1:(n-1)]
#find invers af cov(uhat) - jf. Peters note
covar <- cov(uhat)
covar_start <- covar[lower.tri(covar,diag=TRUE)]
habit=rep(0.5,n)
AR = rep(0.5,n)
if(df_kvint==4){
AR=rep(0.5,n)
habit=rep(0.5,n)}
timetrend=rep(0.01,n)
autocorr <- 0.9
start_1 = c(gamma_start[1:(n-1)], b_start, covar_start)
start_2 = c(gamma_start[1:(n-1)], b_start, covar_start, autocorr)
start_3 = c(gamma_start[1:(n-1)], b_start, timetrend, covar_start)
start_4 = c(gamma_start[1:(n-1)], b_start, timetrend, covar_start, autocorr)
start_5 = c(gamma_start[1:(n-1)], b_start, habit, covar_start)
start_6 = c(gamma_start[1:(n-1)], b_start, habit, covar_start, autocorr)
start_7 = c(gamma_start[1:(n-1)], AR, sqrt(habit), covar_start)
start_8 = c(gamma_start[1:(n-1)], AR, habit, covar_start, autocorr)
## Maksimerer likelihood -----
startvals = list(start_1,start_2,start_3, start_4, start_5, start_6, start_7, start_8)
#Set model
j=7;
startval <- startvals[[j]]
startval
sol <-  optim(par = startval, fn = loglik, model=j,
phat=phat, w=w, x=x, method="BFGS",
control=list(maxit=5000,
trace=6,
ndeps = rep(1e-10,length(startval))) )
solcentral<- sol
sol_gamma <- c(sol$par[1:(n-1)],0)
alpha_sol <- exp(sol_gamma)/sum(exp(sol_gamma))
sum(alpha_sol)
alpha_sol
